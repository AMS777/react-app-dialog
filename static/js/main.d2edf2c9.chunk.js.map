{"version":3,"sources":["context/appContext.js","components/dialogTemplate/DialogTemplate.js","components/dialogsWithTemplate/DialogsWithTemplate.js","components/dialogsWithTemplate/hooks.js","components/dialogsWithSingleComponentError/DialogsWithSingleComponentError.js","components/dialogsWithSingleComponentError/hooks.js","hooks/useEffectSkipFirstRender.js","components/dialogsWithSingleComponent/DialogsWithSingleComponent.js","components/dialogsWithSingleComponent/hooks.js","pages/homepage/Homepage.js","components/appDialog/AppDialog.js","App.js","index.js"],"names":["AppContext","createContext","AppContextProvider","children","useState","isAppDialogOpen","setIsAppDialogOpen","appDialogContext","setAppDialogContext","appContextValue","openAppDialog","closeAppDialog","Provider","value","DialogTemplate","dialogContext","isOpen","onClose","title","content","contentBlock","onOk","open","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","color","variant","DialogsWithTemplate","dialogResult","setDialogResult","dialogTemplateStaticText","onDialogOkCallback","isDialogOpen","setIsDialogOpen","closeDialog","Dialog","useDialogTemplateStaticText","dialogTemplateDynamicText","text","setText","newText","useDialogTemplateDynamicText","dialogTemplateForm","TextField","autoFocus","id","label","type","fullWidth","onChange","event","target","useDialogTemplateForm","Card","CardContent","Typography","component","gutterBottom","CardActions","DialogsWithSingleComponentError","dialogStaticText","appContext","useContext","useDialogStaticText","dialogDynamicText","useDialogDynamicText","dialogForm","useDialogForm","useEffectSkipFirstRender","callback","dependencies","isFirstRender","useRef","useEffect","current","DialogsWithSingleComponent","Homepage","align","AppDialog","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d2edf2c9.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nconst AppContext = createContext();\n\nfunction AppContextProvider({ children }) {\n  const [isAppDialogOpen, setIsAppDialogOpen] = useState(false);\n  const [appDialogContext, setAppDialogContext] = useState({});\n\n  const openAppDialog = appDialogContext => {\n    setAppDialogContext(appDialogContext);\n    setIsAppDialogOpen(true);\n  };\n  const closeAppDialog = () => {\n    setIsAppDialogOpen(false);\n  };\n\n  const appContextValue = {\n    isAppDialogOpen,\n    appDialogContext,\n    setAppDialogContext,\n    openAppDialog,\n    closeAppDialog,\n  };\n\n  return <AppContext.Provider value={appContextValue}>{children}</AppContext.Provider>;\n}\n\nexport { AppContext, AppContextProvider };\n","import React from 'react';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\n\nfunction DialogTemplate({ dialogContext }) {\n  const { isOpen, onClose, title, content, contentBlock, onOk } = dialogContext;\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{content}</DialogContentText>\n        {contentBlock}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button onClick={onOk} color=\"primary\" variant=\"outlined\">\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default DialogTemplate;\n","import React, { useState } from 'react';\n\nimport {\n  useDialogTemplateStaticText,\n  useDialogTemplateDynamicText,\n  useDialogTemplateForm,\n} from './hooks';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nfunction DialogsWithTemplate() {\n  const [dialogResult, setDialogResult] = useState();\n\n  const dialogTemplateStaticText = useDialogTemplateStaticText(setDialogResult);\n  const dialogTemplateDynamicText = useDialogTemplateDynamicText(setDialogResult);\n  const dialogTemplateForm = useDialogTemplateForm(setDialogResult);\n\n  return (\n    <>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n            Dialogs with template component - No Context API\n          </Typography>\n          <Typography gutterBottom>\n            Dialogs created with a template component.{' '}\n            <strong>Every dialog is a different component that has to be rendered.</strong> If there\n            are 20 dialogs in the application, 20 components that are almost identical are rendered.\n          </Typography>\n          <Typography gutterBottom>There's no need for Context API.</Typography>\n          <Typography gutterBottom>\n            <strong>Static text, dynamic text and forms work correctly.</strong>\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={dialogTemplateStaticText.open} color=\"primary\" variant=\"outlined\">\n            Static text\n          </Button>\n          <Button\n            onClick={() => dialogTemplateDynamicText.open('dynamic text')}\n            color=\"primary\"\n            variant=\"outlined\"\n          >\n            Dynamic text\n          </Button>\n          <Button onClick={dialogTemplateForm.open} color=\"primary\" variant=\"outlined\">\n            Form\n          </Button>\n          <Typography gutterBottom>Result of dialog: {dialogResult}</Typography>\n        </CardActions>\n      </Card>\n      {dialogTemplateStaticText.Dialog}\n      {dialogTemplateDynamicText.Dialog}\n      {dialogTemplateForm.Dialog}\n    </>\n  );\n}\n\nexport default DialogsWithTemplate;\n","import React, { useState } from 'react';\n\nimport DialogTemplate from 'components/dialogTemplate';\n\nimport TextField from '@material-ui/core/TextField';\n\nexport function useDialogTemplateStaticText(onDialogOkCallback) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const openDialog = () => setIsDialogOpen(true);\n  const closeDialog = () => setIsDialogOpen(false);\n  const onDialogOk = () => {\n    onDialogOkCallback('Static text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with template',\n    content: 'Static text works correctly.',\n    isOpen: isDialogOpen,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  const Dialog = <DialogTemplate dialogContext={dialogContext} />;\n\n  return { Dialog, open: openDialog };\n}\n\nexport function useDialogTemplateDynamicText(onDialogOkCallback) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [text, setText] = useState();\n\n  const openDialog = newText => {\n    setText(newText);\n    setIsDialogOpen(true);\n  };\n  const closeDialog = () => setIsDialogOpen(false);\n  const onDialogOk = () => {\n    onDialogOkCallback('Dynamic text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with template',\n    content: `Dynamic text works correctly: \"${text}\"`,\n    isOpen: isDialogOpen,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  const Dialog = <DialogTemplate dialogContext={dialogContext} />;\n\n  return { Dialog, open: openDialog };\n}\n\nexport function useDialogTemplateForm(onDialogOkCallback) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [text, setText] = useState('');\n\n  const openDialog = () => setIsDialogOpen(true);\n  const closeDialog = () => setIsDialogOpen(false);\n  const onDialogOk = () => {\n    onDialogOkCallback(text);\n    closeDialog();\n  };\n  const onTextFieldChange = event => {\n    setText(event.target.value);\n  };\n\n  const textField = (\n    <TextField\n      autoFocus\n      id=\"name\"\n      label=\"Enter text\"\n      type=\"text\"\n      variant=\"outlined\"\n      fullWidth\n      onChange={onTextFieldChange}\n      value={text}\n    />\n  );\n\n  const dialogContext = {\n    title: 'Dialog with template',\n    content: 'Forms work correctly.',\n    contentBlock: textField,\n    isOpen: isDialogOpen,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  const Dialog = <DialogTemplate dialogContext={dialogContext} />;\n\n  return { Dialog, open: openDialog };\n}\n","import React, { useState } from 'react';\n\nimport { useDialogStaticText, useDialogDynamicText, useDialogForm } from './hooks';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nfunction DialogsWithSingleComponentError() {\n  const [dialogResult, setDialogResult] = useState();\n\n  const dialogStaticText = useDialogStaticText(setDialogResult);\n  const dialogDynamicText = useDialogDynamicText(setDialogResult);\n  const dialogForm = useDialogForm(setDialogResult);\n\n  return (\n    <>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n            Dialogs with single component - Context API - Error\n          </Typography>\n          <Typography gutterBottom>\n            Dialogs created with a single component for all the application.{' '}\n            <strong>There is only one dialog component rendered</strong> in the application and it's\n            configured every time a dialog is needed.\n          </Typography>\n          <Typography gutterBottom>\n            It's configured with Context API. The structute of the code is the same as with\n            templates, except for the Context API.\n          </Typography>\n          <Typography gutterBottom>\n            Static text works correctly.{' '}\n            <strong>\n              Dynamic text and forms don't work. Context API doesn't react to changes.\n            </strong>\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={dialogStaticText.open} color=\"primary\" variant=\"outlined\">\n            Static text\n          </Button>\n          <Button\n            onClick={() => dialogDynamicText.open('dynamic text')}\n            color=\"primary\"\n            variant=\"outlined\"\n          >\n            Dynamic text\n          </Button>\n          <Button onClick={dialogForm.open} color=\"primary\" variant=\"outlined\">\n            Form\n          </Button>\n          <Typography gutterBottom>Result of dialog: {dialogResult}</Typography>\n        </CardActions>\n      </Card>\n    </>\n  );\n}\n\nexport default DialogsWithSingleComponentError;\n","import React, { useState, useContext } from 'react';\n\nimport { AppContext } from 'context/appContext';\n\nimport TextField from '@material-ui/core/TextField';\n\nexport function useDialogStaticText(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n\n  const openDialog = () => appContext.openAppDialog(dialogContext);\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback('Static text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: 'Static text works correctly.',\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n\nexport function useDialogDynamicText(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n  const [text, setText] = useState();\n\n  const openDialog = newText => {\n    setText(newText);\n    appContext.openAppDialog(dialogContext);\n  };\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback('Dynamic text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: `Dynamic text doesn't work: \"${text}\"`,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n\nexport function useDialogForm(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n  const [text, setText] = useState('');\n\n  const openDialog = () => appContext.openAppDialog(dialogContext);\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback(text);\n    closeDialog();\n  };\n  const onTextFieldChange = event => {\n    setText(event.target.value);\n  };\n\n  const textField = (\n    <TextField\n      autoFocus\n      id=\"name\"\n      label=\"Enter text\"\n      type=\"text\"\n      variant=\"outlined\"\n      fullWidth\n      onChange={onTextFieldChange}\n      value={text}\n    />\n  );\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: \"Forms don't work.\",\n    contentBlock: textField,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n","import { useEffect, useRef } from 'react';\n\nexport function useEffectSkipFirstRender(callback, dependencies) {\n  // useRef instead of useState not to trigger a render when updated\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    callback();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n}\n","import React, { useState } from 'react';\n\nimport { useDialogStaticText, useDialogDynamicText, useDialogForm } from './hooks';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nfunction DialogsWithSingleComponent() {\n  const [dialogResult, setDialogResult] = useState();\n\n  const dialogStaticText = useDialogStaticText(setDialogResult);\n  const dialogDynamicText = useDialogDynamicText(setDialogResult);\n  const dialogForm = useDialogForm(setDialogResult);\n\n  return (\n    <>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n            Dialogs with single component - Context API - Fixed\n          </Typography>\n          <Typography gutterBottom>\n            Dialogs created with a single component for all the application.{' '}\n            <strong>There is only one dialog component rendered</strong> in the application and it's\n            configured every time a dialog is needed.\n          </Typography>\n          <Typography gutterBottom>\n            It's configured with Context API. The structute of the code is almost the same as on the\n            previous example, but{' '}\n            <strong>\n              to fix the Context API no reacting to changes, the context is set manually on every\n              data change with useEffect().\n            </strong>\n          </Typography>\n          <Typography gutterBottom>\n            <strong>Static text, dynamic text and forms work correctly.</strong>\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={dialogStaticText.open} color=\"primary\" variant=\"outlined\">\n            Static text\n          </Button>\n          <Button\n            onClick={() => dialogDynamicText.open('dynamic text')}\n            color=\"primary\"\n            variant=\"outlined\"\n          >\n            Dynamic text\n          </Button>\n          <Button onClick={dialogForm.open} color=\"primary\" variant=\"outlined\">\n            Form\n          </Button>\n          <Typography gutterBottom>Result of dialog: {dialogResult}</Typography>\n        </CardActions>\n      </Card>\n    </>\n  );\n}\n\nexport default DialogsWithSingleComponent;\n","import React, { useState, useContext } from 'react';\n\nimport { AppContext } from 'context/appContext';\nimport { useEffectSkipFirstRender } from 'hooks';\n\nimport TextField from '@material-ui/core/TextField';\n\nexport function useDialogStaticText(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n\n  const openDialog = () => appContext.openAppDialog(dialogContext);\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback('Static text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: 'Static text works correctly.',\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n\nexport function useDialogDynamicText(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n  const [text, setText] = useState();\n\n  useEffectSkipFirstRender(() => {\n    appContext.openAppDialog(dialogContext);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n\n  const openDialog = newText => {\n    setText(newText);\n    appContext.openAppDialog(dialogContext);\n  };\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback('Dynamic text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: `Dynamic text doesn't work: \"${text}\"`,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n\nexport function useDialogForm(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n  const [text, setText] = useState('');\n\n  useEffectSkipFirstRender(() => {\n    appContext.openAppDialog(dialogContext);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n\n  const openDialog = () => appContext.openAppDialog(dialogContext);\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback(text);\n    closeDialog();\n  };\n  const onTextFieldChange = event => {\n    setText(event.target.value);\n  };\n\n  const textField = (\n    <TextField\n      autoFocus\n      id=\"name\"\n      label=\"Enter text\"\n      type=\"text\"\n      variant=\"outlined\"\n      fullWidth\n      onChange={onTextFieldChange}\n      value={text}\n    />\n  );\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: \"Forms don't work.\",\n    contentBlock: textField,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n","import React from 'react';\n\nimport DialogsWithTemplate from 'components/dialogsWithTemplate';\nimport DialogsWithSingleComponentError from 'components/dialogsWithSingleComponentError';\nimport DialogsWithSingleComponent from 'components/dialogsWithSingleComponent';\n\nimport Typography from '@material-ui/core/Typography';\n\nfunction Homepage() {\n  return (\n    <>\n      <header>\n        <Typography variant=\"h3\" component=\"h1\" align=\"center\" gutterBottom>\n          Single app dialog with Context API\n        </Typography>\n      </header>\n      <main>\n        <DialogsWithTemplate />\n        <DialogsWithSingleComponentError />\n        <DialogsWithSingleComponent />\n      </main>\n    </>\n  );\n}\n\nexport default Homepage;\n","import React, { useContext } from 'react';\n\nimport { AppContext } from 'context/appContext';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\n\nfunction AppDialog() {\n  const appContext = useContext(AppContext);\n\n  const { title, content, contentBlock, onOk, onClose } = appContext.appDialogContext;\n\n  return (\n    <Dialog open={appContext.isAppDialogOpen} onClose={onClose}>\n      <DialogTitle>{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{content}</DialogContentText>\n        {contentBlock}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button onClick={onOk} color=\"primary\" variant=\"outlined\">\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default AppDialog;\n","import { AppContextProvider } from 'context/appContext';\n\nimport Homepage from 'pages/homepage';\nimport AppDialog from 'components/appDialog';\n\nimport 'styles/global.css';\n\nfunction App() {\n  return (\n    <AppContextProvider>\n      <Homepage />\n      <AppDialog />\n    </AppContextProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}