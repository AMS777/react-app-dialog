{"version":3,"sources":["context/appContext.js","components/appDialogNoContextReRender/AppDialogNoContextReRender.js","context/appContextNoReRender.js","components/dialogTemplate/DialogTemplate.js","components/dialogsWithTemplate/DialogsWithTemplate.js","components/dialogsWithTemplate/hooks.js","components/dialogsWithSingleComponentError/DialogsWithSingleComponentError.js","components/dialogsWithSingleComponentError/hooks.js","hooks/useEffectSkipFirstRender.js","components/dialogsWithSingleComponent/DialogsWithSingleComponent.js","components/dialogsWithSingleComponent/hooks.js","components/dialogsWithSingleComponentNoContextReRender/DialogsWithSingleComponentNoContextReRender.js","components/dialogsWithSingleComponentNoContextReRender/hooks.js","pages/homepage/Homepage.js","components/appDialog/AppDialog.js","App.js","index.js"],"names":["AppContext","createContext","AppContextProvider","children","useState","isAppDialogOpen","setIsAppDialogOpen","appDialogContext","setAppDialogContext","appContextValue","updateAppDialog","openAppDialog","closeAppDialog","Provider","value","AppDialogNoContextReRender","appContext","useContext","AppContextNoReRender","appDialogData","setAppDialogData","isOpen","title","content","contentBlock","onOk","onClose","open","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","color","variant","AppContextNoReRenderProvider","useRef","current","DialogTemplate","dialogContext","DialogsWithTemplate","dialogResult","setDialogResult","dialogTemplateStaticText","onDialogOkCallback","isDialogOpen","setIsDialogOpen","closeDialog","Dialog","useDialogTemplateStaticText","dialogTemplateDynamicText","text","setText","newText","useDialogTemplateDynamicText","dialogTemplateForm","TextField","autoFocus","id","label","type","fullWidth","onChange","event","target","useDialogTemplateForm","Card","CardContent","Typography","component","gutterBottom","CardActions","DialogsWithSingleComponentError","dialogStaticText","useDialogStaticText","dialogDynamicText","useDialogDynamicText","dialogForm","useDialogForm","useEffectSkipFirstRender","callback","dependencies","isFirstRender","useEffect","DialogsWithSingleComponent","DialogsWithSingleComponentNoContextReRender","Homepage","align","AppDialog","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a299dca.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nconst AppContext = createContext();\n\nfunction AppContextProvider({ children }) {\n  const [isAppDialogOpen, setIsAppDialogOpen] = useState(false);\n  const [appDialogContext, setAppDialogContext] = useState({});\n\n  const openAppDialog = appDialogContext => {\n    setAppDialogContext(appDialogContext);\n    setIsAppDialogOpen(true);\n  };\n  const closeAppDialog = () => {\n    setIsAppDialogOpen(false);\n  };\n\n  const appContextValue = {\n    isAppDialogOpen,\n    appDialogContext,\n    updateAppDialog: setAppDialogContext,\n    openAppDialog,\n    closeAppDialog,\n  };\n\n  return <AppContext.Provider value={appContextValue}>{children}</AppContext.Provider>;\n}\n\nexport { AppContext, AppContextProvider };\n","import React, { useContext, useState } from 'react';\n\nimport { AppContextNoReRender } from 'context/appContextNoReRender';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\n\nfunction AppDialogNoContextReRender() {\n  const appContext = useContext(AppContextNoReRender);\n  const [isAppDialogOpen, setIsAppDialogOpen] = useState(false);\n  const [appDialogData, setAppDialogData] = useState({});\n\n  appContext.isOpen = isAppDialogOpen;\n  appContext.openAppDialog = appDialogData => {\n    setAppDialogData(appDialogData);\n    setIsAppDialogOpen(true);\n  };\n  appContext.closeAppDialog = () => setIsAppDialogOpen(false);\n  appContext.updateAppDialog = appDialogData => setAppDialogData(appDialogData);\n\n  const { title, content, contentBlock, onOk, onClose } = appDialogData;\n\n  return (\n    <Dialog open={isAppDialogOpen} onClose={onClose}>\n      <DialogTitle>{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{content}</DialogContentText>\n        {contentBlock}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button onClick={onOk} color=\"primary\" variant=\"outlined\">\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default AppDialogNoContextReRender;\n","import React, { createContext, useRef } from 'react';\n\nimport AppDialogNoContextReRender from 'components/appDialogNoContextReRender';\n\nconst AppContextNoReRender = createContext();\n\nfunction AppContextNoReRenderProvider({ children }) {\n  const appContext = useRef({});\n\n  return (\n    <AppContextNoReRender.Provider value={appContext.current}>\n      <AppDialogNoContextReRender />\n      {children}\n    </AppContextNoReRender.Provider>\n  );\n}\n\nexport { AppContextNoReRender, AppContextNoReRenderProvider };\n","import React from 'react';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\n\nfunction DialogTemplate({ dialogContext }) {\n  const { isOpen, onClose, title, content, contentBlock, onOk } = dialogContext;\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{content}</DialogContentText>\n        {contentBlock}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button onClick={onOk} color=\"primary\" variant=\"outlined\">\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default DialogTemplate;\n","import React, { useState } from 'react';\n\nimport {\n  useDialogTemplateStaticText,\n  useDialogTemplateDynamicText,\n  useDialogTemplateForm,\n} from './hooks';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nfunction DialogsWithTemplate() {\n  const [dialogResult, setDialogResult] = useState();\n\n  const dialogTemplateStaticText = useDialogTemplateStaticText(setDialogResult);\n  const dialogTemplateDynamicText = useDialogTemplateDynamicText(setDialogResult);\n  const dialogTemplateForm = useDialogTemplateForm(setDialogResult);\n\n  return (\n    <>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n            Dialogs with template component - No Context API\n          </Typography>\n          <Typography gutterBottom>\n            Dialogs created with a template component.{' '}\n            <strong>Every dialog is a different component that has to be rendered.</strong> If there\n            are 20 dialogs in the application, 20 components that are almost identical are rendered.\n          </Typography>\n          <Typography gutterBottom>There's no need for Context API.</Typography>\n          <Typography gutterBottom>\n            <strong>Static text, dynamic text and forms work correctly.</strong>\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={dialogTemplateStaticText.open} color=\"primary\" variant=\"outlined\">\n            Static text\n          </Button>\n          <Button\n            onClick={() => dialogTemplateDynamicText.open('dynamic text')}\n            color=\"primary\"\n            variant=\"outlined\"\n          >\n            Dynamic text\n          </Button>\n          <Button onClick={dialogTemplateForm.open} color=\"primary\" variant=\"outlined\">\n            Form\n          </Button>\n          <Typography gutterBottom>Result of dialog: {dialogResult}</Typography>\n        </CardActions>\n      </Card>\n      {dialogTemplateStaticText.Dialog}\n      {dialogTemplateDynamicText.Dialog}\n      {dialogTemplateForm.Dialog}\n    </>\n  );\n}\n\nexport default DialogsWithTemplate;\n","import React, { useState } from 'react';\n\nimport DialogTemplate from 'components/dialogTemplate';\n\nimport TextField from '@material-ui/core/TextField';\n\nexport function useDialogTemplateStaticText(onDialogOkCallback) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const openDialog = () => setIsDialogOpen(true);\n  const closeDialog = () => setIsDialogOpen(false);\n  const onDialogOk = () => {\n    onDialogOkCallback('Static text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with template',\n    content: 'Static text works correctly.',\n    isOpen: isDialogOpen,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  const Dialog = <DialogTemplate dialogContext={dialogContext} />;\n\n  return { Dialog, open: openDialog };\n}\n\nexport function useDialogTemplateDynamicText(onDialogOkCallback) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [text, setText] = useState();\n\n  const openDialog = newText => {\n    setText(newText);\n    setIsDialogOpen(true);\n  };\n  const closeDialog = () => setIsDialogOpen(false);\n  const onDialogOk = () => {\n    onDialogOkCallback('Dynamic text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with template',\n    content: `Dynamic text works correctly: \"${text}\"`,\n    isOpen: isDialogOpen,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  const Dialog = <DialogTemplate dialogContext={dialogContext} />;\n\n  return { Dialog, open: openDialog };\n}\n\nexport function useDialogTemplateForm(onDialogOkCallback) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [text, setText] = useState('');\n\n  const openDialog = () => setIsDialogOpen(true);\n  const closeDialog = () => setIsDialogOpen(false);\n  const onDialogOk = () => {\n    onDialogOkCallback(text);\n    closeDialog();\n  };\n  const onTextFieldChange = event => {\n    setText(event.target.value);\n  };\n\n  const textField = (\n    <TextField\n      autoFocus\n      id=\"name\"\n      label=\"Enter text\"\n      type=\"text\"\n      variant=\"outlined\"\n      fullWidth\n      onChange={onTextFieldChange}\n      value={text}\n    />\n  );\n\n  const dialogContext = {\n    title: 'Dialog with template',\n    content: 'Forms work correctly.',\n    contentBlock: textField,\n    isOpen: isDialogOpen,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  const Dialog = <DialogTemplate dialogContext={dialogContext} />;\n\n  return { Dialog, open: openDialog };\n}\n","import React, { useState } from 'react';\n\nimport { useDialogStaticText, useDialogDynamicText, useDialogForm } from './hooks';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nfunction DialogsWithSingleComponentError() {\n  const [dialogResult, setDialogResult] = useState();\n\n  const dialogStaticText = useDialogStaticText(setDialogResult);\n  const dialogDynamicText = useDialogDynamicText(setDialogResult);\n  const dialogForm = useDialogForm(setDialogResult);\n\n  return (\n    <>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n            Dialogs with single component - Context API - Error\n          </Typography>\n          <Typography gutterBottom>\n            Dialogs created with a single component for all the application.{' '}\n            <strong>There is only one dialog component rendered</strong> in the application and it's\n            configured every time a dialog is needed.\n          </Typography>\n          <Typography gutterBottom>\n            It's configured with Context API. The structure of the code is the same as with\n            templates, except for the Context API.\n          </Typography>\n          <Typography gutterBottom>\n            Static text works correctly.{' '}\n            <strong>\n              Dynamic text and forms don't work. Context API doesn't react to changes.\n            </strong>\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={dialogStaticText.open} color=\"primary\" variant=\"outlined\">\n            Static text\n          </Button>\n          <Button\n            onClick={() => dialogDynamicText.open('dynamic text')}\n            color=\"primary\"\n            variant=\"outlined\"\n          >\n            Dynamic text\n          </Button>\n          <Button onClick={dialogForm.open} color=\"primary\" variant=\"outlined\">\n            Form\n          </Button>\n          <Typography gutterBottom>Result of dialog: {dialogResult}</Typography>\n        </CardActions>\n      </Card>\n    </>\n  );\n}\n\nexport default DialogsWithSingleComponentError;\n","import React, { useState, useContext } from 'react';\n\nimport { AppContext } from 'context/appContext';\n\nimport TextField from '@material-ui/core/TextField';\n\nexport function useDialogStaticText(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n\n  const openDialog = () => appContext.openAppDialog(dialogContext);\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback('Static text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: 'Static text works correctly.',\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n\nexport function useDialogDynamicText(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n  const [text, setText] = useState();\n\n  const openDialog = newText => {\n    setText(newText);\n    appContext.openAppDialog(dialogContext);\n  };\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback('Dynamic text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: `Dynamic text doesn't work: \"${text}\"`,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n\nexport function useDialogForm(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n  const [text, setText] = useState('');\n\n  const openDialog = () => appContext.openAppDialog(dialogContext);\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback(text);\n    closeDialog();\n  };\n  const onTextFieldChange = event => {\n    setText(event.target.value);\n  };\n\n  const textField = (\n    <TextField\n      autoFocus\n      id=\"name\"\n      label=\"Enter text\"\n      type=\"text\"\n      variant=\"outlined\"\n      fullWidth\n      onChange={onTextFieldChange}\n      value={text}\n    />\n  );\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: \"Forms don't work.\",\n    contentBlock: textField,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n","import { useEffect, useRef } from 'react';\n\nexport function useEffectSkipFirstRender(callback, dependencies) {\n  // useRef instead of useState not to trigger a render when updated\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    callback();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n}\n","import React, { useState } from 'react';\n\nimport { useDialogStaticText, useDialogDynamicText, useDialogForm } from './hooks';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nfunction DialogsWithSingleComponent() {\n  const [dialogResult, setDialogResult] = useState();\n\n  const dialogStaticText = useDialogStaticText(setDialogResult);\n  const dialogDynamicText = useDialogDynamicText(setDialogResult);\n  const dialogForm = useDialogForm(setDialogResult);\n\n  return (\n    <>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n            Dialogs with single component - Context API - Fixed\n          </Typography>\n          <Typography gutterBottom>\n            Dialogs created with a single component for all the application.{' '}\n            <strong>There is only one dialog component rendered</strong> in the application and it's\n            configured every time a dialog is needed.\n          </Typography>\n          <Typography gutterBottom>\n            It's configured with Context API. The structure of the code is almost the same as on the\n            previous example, but{' '}\n            <strong>\n              to fix the Context API no reacting to changes, the context is set manually on every\n              data change with useEffect().\n            </strong>\n          </Typography>\n          <Typography gutterBottom>\n            <strong>Static text, dynamic text and forms work correctly.</strong>\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={dialogStaticText.open} color=\"primary\" variant=\"outlined\">\n            Static text\n          </Button>\n          <Button\n            onClick={() => dialogDynamicText.open('dynamic text')}\n            color=\"primary\"\n            variant=\"outlined\"\n          >\n            Dynamic text\n          </Button>\n          <Button onClick={dialogForm.open} color=\"primary\" variant=\"outlined\">\n            Form\n          </Button>\n          <Typography gutterBottom>Result of dialog: {dialogResult}</Typography>\n        </CardActions>\n      </Card>\n    </>\n  );\n}\n\nexport default DialogsWithSingleComponent;\n","import React, { useState, useContext } from 'react';\n\nimport { AppContext } from 'context/appContext';\nimport { useEffectSkipFirstRender } from 'hooks';\n\nimport TextField from '@material-ui/core/TextField';\n\nexport function useDialogStaticText(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n\n  const openDialog = () => appContext.openAppDialog(dialogContext);\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback('Static text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: 'Static text works correctly.',\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n\nexport function useDialogDynamicText(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n  const [text, setText] = useState();\n\n  useEffectSkipFirstRender(() => {\n    appContext.updateAppDialog(dialogContext);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n\n  const openDialog = newText => {\n    setText(newText);\n    appContext.openAppDialog(dialogContext);\n  };\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback('Dynamic text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: `Dynamic text works correctly: \"${text}\"`,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n\nexport function useDialogForm(onDialogOkCallback) {\n  const appContext = useContext(AppContext);\n  const [text, setText] = useState('');\n\n  useEffectSkipFirstRender(() => {\n    appContext.updateAppDialog(dialogContext);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n\n  const openDialog = () => appContext.openAppDialog(dialogContext);\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback(text);\n    closeDialog();\n  };\n  const onTextFieldChange = event => {\n    setText(event.target.value);\n  };\n\n  const textField = (\n    <TextField\n      autoFocus\n      id=\"name\"\n      label=\"Enter text\"\n      type=\"text\"\n      variant=\"outlined\"\n      fullWidth\n      onChange={onTextFieldChange}\n      value={text}\n    />\n  );\n\n  const dialogContext = {\n    title: 'Dialog with single component',\n    content: 'Forms work correctly.',\n    contentBlock: textField,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n","import React, { useState } from 'react';\n\nimport { useDialogStaticText, useDialogDynamicText, useDialogForm } from './hooks';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nfunction DialogsWithSingleComponentNoContextReRender() {\n  const [dialogResult, setDialogResult] = useState();\n\n  const dialogStaticText = useDialogStaticText(setDialogResult);\n  const dialogDynamicText = useDialogDynamicText(setDialogResult);\n  const dialogForm = useDialogForm(setDialogResult);\n\n  return (\n    <>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n            Dialogs with single component - Context API - No Context Re-render\n          </Typography>\n          <Typography gutterBottom>\n            Dialogs created with a single component for all the application.{' '}\n            <strong>There is only one dialog component rendered</strong> in the application and it's\n            configured every time a dialog is needed.\n          </Typography>\n          <Typography gutterBottom>\n            It's configured with Context API. The main structure of the code is similar as on the\n            previous example, but{' '}\n            <strong>\n              the application dialog state has been moved from the context file to the dialog\n              component.\n            </strong>{' '}\n            The context file only contains a reference to the application dialog with useRef(), so\n            that{' '}\n            <strong>\n              it doesn't re-render when a dialog is changed, and neither the components that consume\n              it.\n            </strong>\n          </Typography>\n          <Typography gutterBottom>\n            <strong>Static text, dynamic text and forms work correctly.</strong>\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button onClick={dialogStaticText.open} color=\"primary\" variant=\"outlined\">\n            Static text\n          </Button>\n          <Button\n            onClick={() => dialogDynamicText.open('dynamic text')}\n            color=\"primary\"\n            variant=\"outlined\"\n          >\n            Dynamic text\n          </Button>\n          <Button onClick={dialogForm.open} color=\"primary\" variant=\"outlined\">\n            Form\n          </Button>\n          <Typography gutterBottom>Result of dialog: {dialogResult}</Typography>\n        </CardActions>\n      </Card>\n    </>\n  );\n}\n\nexport default DialogsWithSingleComponentNoContextReRender;\n","import React, { useState, useContext } from 'react';\n\nimport { AppContextNoReRender } from 'context/appContextNoReRender';\nimport { useEffectSkipFirstRender } from 'hooks';\n\nimport TextField from '@material-ui/core/TextField';\n\nexport function useDialogStaticText(onDialogOkCallback) {\n  const appContext = useContext(AppContextNoReRender);\n\n  const openDialog = () => appContext.openAppDialog(dialogContext);\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback('Static text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with single component - No Context Re-render',\n    content: 'Static text works correctly.',\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n\nexport function useDialogDynamicText(onDialogOkCallback) {\n  const appContext = useContext(AppContextNoReRender);\n  const [text, setText] = useState();\n\n  useEffectSkipFirstRender(() => {\n    appContext.updateAppDialog(dialogContext);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n\n  const openDialog = newText => {\n    setText(newText);\n    appContext.openAppDialog(dialogContext);\n  };\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback('Dynamic text dialog okay');\n    closeDialog();\n  };\n\n  const dialogContext = {\n    title: 'Dialog with single component - No Context Re-render',\n    content: `Dynamic text works correctly: \"${text}\"`,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n\nexport function useDialogForm(onDialogOkCallback) {\n  const appContext = useContext(AppContextNoReRender);\n  const [text, setText] = useState('');\n\n  useEffectSkipFirstRender(() => {\n    appContext.updateAppDialog(dialogContext);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n\n  const openDialog = () => appContext.openAppDialog(dialogContext);\n  const closeDialog = () => appContext.closeAppDialog();\n  const onDialogOk = () => {\n    onDialogOkCallback(text);\n    closeDialog();\n  };\n  const onTextFieldChange = event => {\n    setText(event.target.value);\n  };\n\n  const textField = (\n    <TextField\n      autoFocus\n      id=\"name\"\n      label=\"Enter text\"\n      type=\"text\"\n      variant=\"outlined\"\n      fullWidth\n      onChange={onTextFieldChange}\n      value={text}\n    />\n  );\n\n  const dialogContext = {\n    title: 'Dialog with single component - No Context Re-render',\n    content: 'Forms work correctly.',\n    contentBlock: textField,\n    onOk: onDialogOk,\n    onClose: closeDialog,\n  };\n\n  return { open: openDialog };\n}\n","import React from 'react';\n\nimport DialogsWithTemplate from 'components/dialogsWithTemplate';\nimport DialogsWithSingleComponentError from 'components/dialogsWithSingleComponentError';\nimport DialogsWithSingleComponent from 'components/dialogsWithSingleComponent';\nimport DialogsWithSingleComponentNoContextReRender from 'components/dialogsWithSingleComponentNoContextReRender';\n\nimport Typography from '@material-ui/core/Typography';\n\nfunction Homepage() {\n  return (\n    <>\n      <header>\n        <Typography variant=\"h3\" component=\"h1\" align=\"center\" gutterBottom>\n          Single app dialog with Context API\n        </Typography>\n      </header>\n      <main>\n        <DialogsWithTemplate />\n        <DialogsWithSingleComponentError />\n        <DialogsWithSingleComponent />\n        <DialogsWithSingleComponentNoContextReRender />\n      </main>\n    </>\n  );\n}\n\nexport default Homepage;\n","import React, { useContext } from 'react';\n\nimport { AppContext } from 'context/appContext';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\n\nfunction AppDialog() {\n  const appContext = useContext(AppContext);\n\n  const { title, content, contentBlock, onOk, onClose } = appContext.appDialogContext;\n\n  return (\n    <Dialog open={appContext.isAppDialogOpen} onClose={onClose}>\n      <DialogTitle>{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>{content}</DialogContentText>\n        {contentBlock}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button onClick={onOk} color=\"primary\" variant=\"outlined\">\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default AppDialog;\n","import { AppContextProvider } from 'context/appContext';\nimport { AppContextNoReRenderProvider } from 'context/appContextNoReRender';\n\nimport Homepage from 'pages/homepage';\nimport AppDialog from 'components/appDialog';\n\nimport 'styles/global.css';\n\nfunction App() {\n  return (\n    <AppContextNoReRenderProvider>\n      <AppContextProvider>\n        <Homepage />\n        <AppDialog />\n      </AppContextProvider>\n    </AppContextNoReRenderProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}